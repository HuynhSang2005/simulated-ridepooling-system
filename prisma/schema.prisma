generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === ENUMS ===

enum DriverStatus {
  IDLE
  ON_ROUTE
}

enum RouteStatus {
  PENDING_ASSIGNMENT
  IN_PROGRESS
  COMPLETED
}

enum BookingStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// === MODELS ===

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Driver {
  id        String       @id @default(cuid())
  name      String
  routes    Route[]
  status    DriverStatus @default(IDLE) // Thêm dòng này
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Booking {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  pickupAddress   String
  pickupLocation  Json
  dropoffAddress  String
  dropoffLocation Json
  status          BookingStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  stop Stop? @relation("BookingToStop")
}

model Route {
  id            String      @id @default(cuid())
  driver        Driver      @relation(fields: [driverId], references: [id])
  driverId      String
  stops         Stop[]
  status        RouteStatus @default(PENDING_ASSIGNMENT)
  totalDistance Float // tính bằng mét
  totalDuration Float // tính bằng giây
  createdAt     DateTime    @default(now())
}

model Stop {
  id          String    @id @default(cuid())
  route       Route     @relation(fields: [routeId], references: [id])
  routeId     String
  booking     Booking?  @relation("BookingToStop", fields: [bookingId], references: [id])
  bookingId   String?   @unique
  type        String
  location    Json
  sequence    Int
  completedAt DateTime?
  eta         DateTime?
}
